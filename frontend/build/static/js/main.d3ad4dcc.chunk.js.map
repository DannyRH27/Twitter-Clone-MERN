{"version":3,"sources":["util/route_util.js","components/main/main_page.js","util/session_api_util.js","actions/session_actions.js","components/nav/navbar.js","components/nav/navbar_container.js","components/session/login_form.js","components/session/login_form_container.js","components/session/signup_form.js","components/session/signup_form_container.js","actions/tweet_actions.js","util/tweet_api_util.js","components/tweets/tweet_box.js","components/tweets/tweets.js","components/tweets/tweets_container.js","components/profile/profile.js","components/profile/profile_container.js","components/tweets/tweet_compose.js","components/tweets/tweet_compose_container.js","components/app.js","components/root.js","reducers/session_api_reducer.js","reducers/session_errors_reducer.js","reducers/errors_reducer.js","reducers/tweets_reducer.js","reducers/root_reducer.js","store/store.js","index.js"],"names":["mapStateToProps","state","loggedIn","session","isAuthenticated","AuthRoute","withRouter","connect","Component","component","path","exact","render","props","to","ProtectedRoute","rest","MainPage","React","setAuthToken","token","axios","defaults","headers","common","receiveErrors","errors","type","signup","user","dispatch","userData","post","then","err","response","data","login","res","localStorage","setItem","APIUtil","decoded","jwt_decode","currentUser","catch","logout","removeItem","NavBar","logoutUser","bind","getLinks","e","preventDefault","this","onClick","LoginForm","email","password","handleSubmit","renderErrors","nextProps","history","push","setState","field","currentTarget","value","Object","keys","map","error","i","key","onSubmit","onChange","update","placeholder","SignupForm","handle","password2","clearedErrors","signedIn","className","isSignedIn","fetchTweets","get","tweets","receiveTweets","console","log","fetchUserTweets","id","TweetAPIUtil","receiveUserTweets","composeTweet","tweet","receiveNewTweet","TweetBox","text","Tweet","newState","length","_id","values","all","Tweets","Profile","TweetCompose","newTweet","new","App","LoginFormContainer","SignupFormContainer","TweetsContainer","ProfileContainer","TweetComposeContainer","Root","store","initialState","SessionErrorsReducer","action","freeze","combineReducers","TweetsReducer","undefined","assign","RootReducer","configureStore","preloadedState","createStore","rootReducer","applyMiddleware","thunk","logger","document","addEventListener","jwtToken","decodedUser","currentTime","Date","now","exp","window","location","href","root","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.d3ad4dcc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Redirect, withRouter } from 'react-router-dom';\n\nconst Auth = ({ component: Component, path, loggedIn, exact}) => (\n    <Route\n        path={path}\n        exact={exact}\n        render={(props) =>(\n            !loggedIn ? (\n                <Component {...props}/>\n            ) : (\n                <Redirect to=\"/tweets\" />\n            )\n        )}\n    />\n);\n\nconst Protected = ({ component: Component, loggedIn, ...rest }) => (\n    <Route\n        {...rest}\n        render={props =>\n            loggedIn ? (\n                <Component {...props} />\n            ) : (\n                <Redirect to=\"/login\" />\n            )\n        }\n    />\n);\n\nconst mapStateToProps = state => (\n    {loggedIn: state.session.isAuthenticated}\n);\n\nexport const AuthRoute = withRouter(connect(mapStateToProps)(Auth));\n\nexport const ProtectedRoute = withRouter(connect(mapStateToProps)(Protected));","import React from 'react';\n\nclass MainPage extends React.Component {\n    render(){\n        return(\n            <div>\n                <h1>A Twitter Clone</h1>\n                <footer>\n                    Copyright &copy; 2019 Chirper\n                </footer>\n            </div>\n        );\n    }\n}\n\nexport default MainPage;","import axios from 'axios';\n\nexport const setAuthToken = token => {\n    if (token) {\n        axios.defaults.headers.common['Authorization'] = token;\n    } else {\n        delete axios.defaults.headers.common['Authorization'];\n    }\n};\n\nexport const signup = (userData) => {\n    return axios.post('/api/users/register', userData);\n};\n\nexport const login = (userData) => {\n    return axios.post('/api/users/login', userData);\n};\n\n","import * as APIUtil from '../util/session_api_util';\nimport jwt_decode from 'jwt-decode';\n\nexport const RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport const RECEIVE_SESSION_ERRORS = 'RECEIVE_SESSION_ERRORS';\nexport const RECEIVE_CURRENT_USER = 'RECEIVE_CURRENT_USER';\nexport const RECEIVE_USER_SIGN_IN = 'RECEIVE_USER_SIGN_IN';\n\nexport const receiveCurrentUser = currentUser => ({\n    type: RECEIVE_CURRENT_USER,\n    currentUser\n});\n\nexport const receiveUserSignIn = () => ({\n    type: RECEIVE_USER_SIGN_IN\n});\n\nexport const receiveErrors = errors => ({\n    type: RECEIVE_SESSION_ERRORS,\n    errors\n})\n\nexport const logoutUser = () => ({\n    type: RECEIVE_USER_LOGOUT\n});\n\nexport const signup = user => dispatch => (\n    APIUtil.signup(user).then(() => (\n        dispatch(receiveUserSignIn())\n    ), err => (\n        dispatch(receiveErrors(err.response.data))\n    ))\n);\n\nexport const login = user => dispatch => (\n    APIUtil.login(user)\n        .then(res => {\n            const { token } = res.data;\n            localStorage.setItem('jwtToken', token);\n            APIUtil.setAuthToken(token);\n            const decoded = jwt_decode(token);\n            dispatch(receiveCurrentUser(decoded))\n        })\n        .catch(err => {\n            dispatch(receiveErrors(err.response.data));\n        })\n)\n\nexport const logout = () => dispatch => {\n    localStorage.removeItem('jwtToken')\n    APIUtil.setAuthToken(false)\n    dispatch(logoutUser())\n};","import React from 'react';\nimport { Link } from 'react-router-dom'\n\nclass NavBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.logoutUser = this.logoutUser.bind(this);\n        this.getLinks = this.getLinks.bind(this);\n    }\n\n    logoutUser(e){\n        e.preventDefault();\n        this.props.logout();\n    }\n\n    getLinks(){\n        if(this.props.loggedIn){\n            return (\n              <div>\n                <Link to={\"./tweets\"}>All Tweets</Link>\n                <Link to={\"./profile\"}>Profile</Link>\n                <Link to={\"./new_tweet\"}>Write a Tweet</Link>\n                <button onClick={this.logoutUser}>Logout</button>\n              </div>\n            );\n        } else {\n            return (\n                <div>\n                    <Link to={'signup'}>Signup</Link>\n                    <Link to={'login'}>Login</Link>\n                </div>\n            );\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <h1>Chirper</h1>\n                { this.getLinks() }\n            </div>\n        );\n    }\n}\n\nexport default NavBar;","import { connect } from 'react-redux';\nimport { logout } from '../../actions/session_actions';\nimport NavBar from './navbar';\n\nconst mapStateToProps = state => ({\n    loggedIn: state.session.isAuthenticated\n});\n\nexport default connect(\n    mapStateToProps,\n    { logout }\n)(NavBar);","import React from 'react'\nimport { withRouter } from 'react-router-dom';\n\nclass LoginForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: '',\n            password: '',\n            errors: {}\n        };\n\n        this.handleSubmit= this.handleSubmit.bind(this);\n        this.renderErrors = this.renderErrors.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps){\n        if (nextProps.currentUser === true) {\n            this.props.history.push('/tweets');\n        }\n\n        this.setState({errors: nextProps.errors})\n    }\n\n    update(field) {\n        return e => this.setState({\n            [field]: e.currentTarget.value\n        });\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        const user = {\n            email: this.state.email,\n            password: this.state.password\n        };\n\n        this.props.login(user)\n    }\n\n    renderErrors() {\n        return(\n            <ul>\n                {Object.keys(this.state.errors).map((error, i) => (\n                    <li key={`error-${i}`}>\n                        {this.state.errors[error]}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <div>\n                        <input \n                            type=\"text\"\n                            value={this.state.email}\n                            onChange={this.update('email')}\n                            placeholder=\"Email\"\n                        />\n                    <br/>\n                        <input\n                            type=\"password\"\n                            value={this.state.password}\n                            onChange={this.update('password')}\n                            placeholder=\"Password\"\n                        />\n                    </div>\n                    <input type=\"submit\" value=\"Submit\"/>\n                    {this.renderErrors()}\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(LoginForm);","import { connect } from 'react-redux'\nimport { login } from '../../actions/session_actions';\nimport LoginForm from './login_form'\n\nconst mapStateToProps = (state) => {\n    return{\n        errors: state.errors.session\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        login: user => dispatch(login(user))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass SignupForm extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            email: '',\n            handle: '',\n            password: '',\n            password2: '',\n            errors: {}\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.clearedErrors = false;\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.signedIn === true) {\n            this.props.history.push('/login');\n        }\n\n        this.setState({ errors: nextProps.errors})\n    }\n\n    update(field) {\n        return e => this.setState({\n            [field]: e.currentTarget.value\n        });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const user = {\n            email: this.state.email,\n            handle: this.state.handle,\n            password: this.state.password,\n            password2: this.state.password2\n        };\n\n        this.props.signup(user, this.props.history);\n    }\n\n    renderErrors(){\n        return(\n            <ul>\n                {Object.keys(this.state.errors).map((error, i) => (\n                    <li key={`error-${i}`}>\n                        {this.state.errors[error]}\n                    </li>\n                ))}\n            </ul>\n        )\n    }\n\n    render(){\n        return(\n            <div className=\"signup-form-container\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className='signup-form'>\n                        <br/>\n                            <input\n                                type=\"text\"\n                                value={this.state.email}\n                                onChange={this.update('email')}\n                                placeholder=\"Email\"\n                            />\n                        <br/>\n                            <input\n                                type=\"text\"\n                                value={this.state.handle}\n                                onChange={this.update('handle')}\n                                placeholder=\"Handle\"\n                            />\n                        <br/>\n                            <input\n                                type=\"password\"\n                                value={this.state.password}\n                                onChange={this.update('password')}\n                                placeholder=\"Password\"\n                            />\n                        <br/>\n                            <input\n                                type=\"password\"\n                                value={this.state.password2}\n                                onChange={this.update('password2')}\n                                placeholder=\"Confirm Password\"\n                            />\n                        <br/>\n                        <input\n                            type=\"submit\"\n                            value=\"Submit\"\n                        />\n                        {this.renderErrors()}\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(SignupForm);","import { connect } from \"react-redux\";\nimport { signup } from \"../../actions/session_actions\";\nimport SignupForm from \"./signup_form\";\n\nconst mapStateToProps = (state) => {\n  return {\n    signedIn: state.session.isSignedIn,\n    errors: state.errors.session,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signup: (user) => dispatch(signup(user)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupForm);\n","import * as TweetAPIUtil from '../util/tweet_api_util';\n\nexport const RECEIVE_TWEETS = \"RECEIVE_TWEETS\";\nexport const RECEIVE_USER_TWEETS =\"RECEIVE_USER_TWEETS\";\nexport const RECEIVE_NEW_TWEET =\"RECEIVE_NEW_TWEET\";\n\nexport const receiveTweets = tweets => ({\n    type: RECEIVE_TWEETS,\n    tweets\n})\n\nexport const receiveUserTweets = tweets => ({\n    type: RECEIVE_USER_TWEETS,\n    tweets\n});\n\nexport const receiveNewTweet = tweet => ({\n    type: RECEIVE_NEW_TWEET,\n    tweet\n})\n\nexport const fetchTweets = () => dispatch => (\n    TweetAPIUtil.getTweets()\n        .then(tweets => dispatch(receiveTweets(tweets)))\n        .catch(err => console.log(err))\n)\n\nexport const fetchUserTweets = id => dispatch => (\n    TweetAPIUtil.getUserTweets(id)\n        .then(tweets => dispatch(receiveUserTweets(tweets)))\n        .catch(err => console.log(err))\n)\n\nexport const composeTweet = data => dispatch => (\n    TweetAPIUtil.writeTweet(data)\n        .then(tweet => dispatch(receiveNewTweet(tweet)))\n        .catch(err => console.log(err))\n)\n","import axios from 'axios';\n\nexport const getTweets = () => {\n    return axios.get('/api/tweets')\n};\n\nexport const getUserTweets = id => {\n    return axios.get(`/api/tweets/user/${id}`)\n};\n\nexport const writeTweet = data => {\n    return axios.post('/api/tweets/', data)\n}","import React from 'react'\n\nclass TweetBox extends React.Component {\n    render(){\n        return(\n            <div>\n                <h3>{this.props.text}</h3>\n            </div>\n        );\n    }\n}\n\nexport default TweetBox;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport TweetBox from './tweet_box';\n\nclass Tweet extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            tweets: []\n        }\n    }\n\n    componentWillMount(){\n        this.props.fetchTweets();\n    }\n\n    componentWillReceiveProps(newState){\n        this.setState({ tweets: newState.tweets });\n    }\n\n    render(){\n        if (this.state.tweets.length === 0) {\n            return (<div>There are no Tweets</div>)\n        } else {\n            return (\n                <div>\n                    <h2>All Tweets</h2>\n                    {this.state.tweets.map(tweet => (\n                        <TweetBox key={tweet._id} text={tweet.text} />\n                    ))}\n                </div>\n            );\n        }\n    }\n}\n\nexport default withRouter(Tweet);","import { connect } from 'react-redux';\nimport { fetchTweets } from '../../actions/tweet_actions';\nimport Tweets from './tweets';\n\nconst mapStateToProps = (state) => {\n    return {\n        tweets: Object.values(state.tweets.all)\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchTweets: () => dispatch(fetchTweets())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tweets);","import React from 'react';\nimport TweetBox from '../tweets/tweet_box';\n\nclass Profile extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            tweets: []\n        }\n    }\n\n    componentWillMount(){\n        console.log(this.props.currentUser.id)\n        this.props.fetchUserTweets(this.props.currentUser.id)\n    }\n\n    componentWillReceiveProps(newState) {\n        this.setState({ tweets: newState.tweets })\n    }\n\n    render(){\n        if (this.state.tweets.length === 0) {\n            return (<div>This user has no Tweets</div>)\n        } else {\n            return (\n                <div>\n                    <h2>All of this user's tweets</h2>\n                    {this.state.tweets.map(tweet => (\n                        <TweetBox key={tweet._id} text={tweet.text} />\n                    ))}\n                </div>\n            );\n        }\n    }\n}\n\nexport default Profile;","import { connect } from 'react-redux'\nimport { fetchUserTweets } from '../../actions/tweet_actions'\nimport Profile from './profile';\n\nconst mapStateToProps = (state) => {\n    return {\n        tweets: Object.values(state.tweets.user),\n        currentUser: state.session.user\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchUserTweets: id => dispatch(fetchUserTweets(id))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","import React from 'react';\nimport TweetBox from './tweet_box';\n\nclass TweetCompose extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            text: '',\n            newTweet: ''\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ newTweet: nextProps.newTweet.text });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        let tweet = {\n            text: this.state.text\n        };\n\n        this.props.composeTweet(tweet);\n        this.setState({text: ''})\n    }\n\n    update() {\n        return e => this.setState({\n            text: e.currentTarget.value\n        });\n    }\n\n    render(){\n        return (\n          <div>\n            <form onSubmit={this.handleSubmit} >\n                <div>\n                    <input\n                        type=\"textarea\"\n                        value={this.state.text}\n                        onChange={this.update()}\n                        placeholder=\"Write your tweet...\"\n                    />\n                    <input type=\"submit\" value=\"Submit\"/>\n                </div>\n            </form>\n            <br/>\n            <TweetBox text={this.state.newTweet}/>\n          </div>\n        );\n    }\n}\n\nexport default TweetCompose;","import { connect } from 'react-redux';\nimport { composeTweet } from '../../actions/tweet_actions';\nimport TweetCompose from './tweet_compose';\n\nconst mapStateToProps = (state) => {\n    return {\n        currentUser: state.session.user,\n        newTweet: state.tweets.new\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        composeTweet: data => dispatch(composeTweet(data))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TweetCompose);","import React from 'react';\nimport { AuthRoute, ProtectedRoute } from '../util/route_util';\nimport { Switch } from 'react-router-dom';\nimport MainPage from './main/main_page';\nimport NavBarContainer from './nav/navbar_container';\nimport LoginFormContainer from './session/login_form_container';\nimport SignupFormContainer from './session/signup_form_container';\nimport TweetsContainer from './tweets/tweets_container';\nimport ProfileContainer from './profile/profile_container';\nimport TweetComposeContainer from './tweets/tweet_compose_container';\n\n\nconst App = () => (\n  <div>\n    <NavBarContainer/>\n    <Switch>\n      <AuthRoute exact path=\"/\" component={MainPage} />\n      <AuthRoute exact path =\"/login\" component={LoginFormContainer}/>\n      <AuthRoute exact path =\"/signup\" component={SignupFormContainer}/>\n\n      <ProtectedRoute exact path='/tweets' component={TweetsContainer}/>\n      <ProtectedRoute exact path='/profile' component={ProfileContainer}/>\n      <ProtectedRoute exact path='/new_tweet' component={TweetComposeContainer}/>\n    </Switch>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './app'\n\nconst Root = ({store}) => (\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>\n);\n\nexport default Root;","import { RECEIVE_USER_LOGOUT, RECEIVE_CURRENT_USER, RECEIVE_USER_SIGN_IN } from '../actions/session_actions';\n\nconst initialState = {\n    isAuthenticated: false,\n    user:  {}\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type){\n        case RECEIVE_CURRENT_USER:\n            return {\n                ...state,\n                isAuthenticated: !!action.currentUser,\n                user: action.currentUser\n            };\n        case RECEIVE_USER_SIGN_IN:\n            return {\n                ...state,\n                isSignedIn: true\n            }\n        case RECEIVE_USER_LOGOUT:\n            return {\n                isAuthenticated: false,\n                user: undefined\n            };\n        default:\n            return state;\n    }\n}","import { RECEIVE_SESSION_ERRORS, RECEIVE_CURRENT_USER } from '../actions/session_actions';\n\nconst SessionErrorsReducer = (state = [], action) => {\n    Object.freeze(state);\n    switch (action.type) {\n        case RECEIVE_SESSION_ERRORS:\n            return action.errors;\n        case RECEIVE_CURRENT_USER:\n            return [];\n        default:\n            return state;\n    }\n};\n\nexport default SessionErrorsReducer;","import { combineReducers } from 'redux';\nimport SessionErrorsReducer from './session_errors_reducer';\n\nexport default combineReducers({\n    session: SessionErrorsReducer\n});","import {RECEIVE_TWEETS, RECEIVE_USER_TWEETS, RECEIVE_NEW_TWEET } from '../actions/tweet_actions';\n\nconst TweetsReducer = (state = {all:  {}, user: {}, new: undefined}, action) => {\n    Object.freeze(state);\n    const newState = Object.assign({}, state)\n    switch (action.type) {\n        case RECEIVE_TWEETS:\n            newState.all = action.tweets.data;\n            return newState;\n        case RECEIVE_USER_TWEETS:\n            newState.user = action.tweets.data;\n            return newState;\n        case RECEIVE_NEW_TWEET:\n            newState.new = action.tweet.data\n            return newState\n        default:\n            return state;\n    }\n}\n\nexport default TweetsReducer;\n","import { combineReducers } from 'redux';\nimport session from './session_api_reducer';\nimport errors from './errors_reducer';\nimport tweets from './tweets_reducer'\n\nconst RootReducer = combineReducers({\n    tweets,\n    session,\n    errors\n});\n\nexport default RootReducer;","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\n\nimport rootReducer from \"../reducers/root_reducer\";\n\nconst configureStore = (preloadedState = {}) =>\n  createStore(rootReducer, preloadedState, applyMiddleware(thunk, logger));\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './components/root';\nimport configureStore from './store/store';\nimport jwt_decode from 'jwt-decode';\nimport { setAuthToken } from './util/session_api_util';\nimport { logout } from './actions/session_actions';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    let store;\n\n    if (localStorage.jwtToken) {\n        setAuthToken(localStorage.jwtToken);\n        \n\n        const decodedUser = jwt_decode(localStorage.jwtToken);\n\n        const preloadedState = {session: {isAuthenticated: true, user: decodedUser}};\n\n        store = configureStore(preloadedState);\n\n        const currentTime = Date.now() / 1000;\n\n        if (decodedUser.exp < currentTime) {\n            store.dispatch(logout());\n            window.location.href = '/login'\n        }\n    } else {\n        store = configureStore({})\n    }\n    const root = document.getElementById('root');\n\n    ReactDOM.render(<Root store={store}/>, root)\n});\n\n"],"sourceRoot":""}